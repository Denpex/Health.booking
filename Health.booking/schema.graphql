schema {
  query: Query
  mutation: Mutation
  subscription: Subscription
}

type Doctor {
  hospitalId: String!
  id: ID!
  name: String!
  specialty: String!
}

type DoctorConnection {
  items: [Doctor]
  nextToken: String
}

type HealthInfo {
  age: Int!
  height: Float!
  id: ID!
  sex: String!
  system: String!
  weight: Float!
}

type HealthInfoConnection {
  items: [HealthInfo]
  nextToken: String
}

type Hospital {
  coordinates: String!
  id: ID!
  location: String!
  name: String!
}

type HospitalConnection {
  items: [Hospital]
  nextToken: String
}

type Mutation {
  createDoctor(input: CreateDoctorInput!): Doctor
  createHealthInfo(input: CreateHealthInfoInput!): HealthInfo
  createHospital(input: CreateHospitalInput!): Hospital
  createPatientUser(input: CreatePatientUserInput!): PatientUser
  createUser(input: CreateUserInput!): User
  deleteDoctor(input: DeleteDoctorInput!): Doctor
  deleteHealthInfo(input: DeleteHealthInfoInput!): HealthInfo
  deleteHospital(input: DeleteHospitalInput!): Hospital
  deletePatientUser(input: DeletePatientUserInput!): PatientUser
  deleteUser(input: DeleteUserInput!): User
  updateDoctor(input: UpdateDoctorInput!): Doctor
  updateHealthInfo(input: UpdateHealthInfoInput!): HealthInfo
  updateHospital(input: UpdateHospitalInput!): Hospital
  updatePatientUser(input: UpdatePatientUserInput!): PatientUser
}

type PatientUser {
  email: String!
  firstName: String!
  healthId: ID!
  id: ID!
  lastName: String!
}

type PatientUserConnection {
  items: [PatientUser]
  nextToken: String
}

type Query {
  getDoctor(id: ID!): Doctor
  getHealthInfo(id: ID!): HealthInfo
  getHospital(id: ID!): Hospital
  getPatientUser(id: ID!): PatientUser
  getUser(key: String!): User
  listDoctors(filter: TableDoctorFilterInput, limit: Int, nextToken: String): DoctorConnection
  listHealthInfos(filter: TableHealthInfoFilterInput, limit: Int, nextToken: String): HealthInfoConnection
  listHospitals(filter: TableHospitalFilterInput, limit: Int, nextToken: String): HospitalConnection
  listPatientUsers(filter: TablePatientUserFilterInput, limit: Int, nextToken: String): PatientUserConnection
  listUsers(filter: TableUserFilterInput, limit: Int, nextToken: String): UserConnection
}

type Subscription {
  onCreateDoctor(hospitalId: String, id: ID, name: String, specialty: String): Doctor @aws_subscribe(mutations : ["createDoctor"])
  onCreateHealthInfo(age: Int, height: Float, id: ID, sex: String, weight: Float): HealthInfo @aws_subscribe(mutations : ["createHealthInfo"])
  onCreateHospital(coordinates: String, id: ID, location: String, name: String): Hospital @aws_subscribe(mutations : ["createHospital"])
  onCreatePatientUser(email: String, firstName: String, healthId: ID, id: ID, lastName: String): PatientUser @aws_subscribe(mutations : ["createPatientUser"])
  onCreateUser(id: ID, key: String, type: String): User @aws_subscribe(mutations : ["createUser"])
  onDeleteDoctor(hospitalId: String, id: ID, name: String, specialty: String): Doctor @aws_subscribe(mutations : ["deleteDoctor"])
  onDeleteHealthInfo(age: Int, height: Float, id: ID, sex: String, weight: Float): HealthInfo @aws_subscribe(mutations : ["deleteHealthInfo"])
  onDeleteHospital(coordinates: String, id: ID, location: String, name: String): Hospital @aws_subscribe(mutations : ["deleteHospital"])
  onDeletePatientUser(email: String, firstName: String, healthId: ID, id: ID, lastName: String): PatientUser @aws_subscribe(mutations : ["deletePatientUser"])
  onDeleteUser(id: ID, key: String, type: String): User @aws_subscribe(mutations : ["deleteUser"])
  onUpdateDoctor(hospitalId: String, id: ID, name: String, specialty: String): Doctor @aws_subscribe(mutations : ["updateDoctor"])
  onUpdateHealthInfo(age: Int, height: Float, id: ID, sex: String, weight: Float): HealthInfo @aws_subscribe(mutations : ["updateHealthInfo"])
  onUpdateHospital(coordinates: String, id: ID, location: String, name: String): Hospital @aws_subscribe(mutations : ["updateHospital"])
  onUpdatePatientUser(email: String, firstName: String, healthId: ID, id: ID, lastName: String): PatientUser @aws_subscribe(mutations : ["updatePatientUser"])
}

type User {
  id: ID!
  key: String!
  type: String!
}

type UserConnection {
  items: [User]
  nextToken: String
}

input CreateDoctorInput {
  hospitalId: String!
  id: ID!
  name: String!
  specialty: String!
}

input CreateHealthInfoInput {
  age: Int!
  height: Float!
  sex: String!
  system: String!
  weight: Float!
}

input CreateHospitalInput {
  coordinates: String!
  location: String!
  name: String!
}

input CreatePatientUserInput {
  email: String!
  firstName: String!
  healthId: ID!
  id: ID!
  lastName: String!
}

input CreateUserInput {
  key: String!
  type: String!
}

input DeleteDoctorInput {
  id: ID!
}

input DeleteHealthInfoInput {
  id: ID!
}

input DeleteHospitalInput {
  id: ID!
}

input DeletePatientUserInput {
  id: ID!
}

input DeleteUserInput {
  key: String!
}

input TableBooleanFilterInput {
  eq: Boolean
  ne: Boolean
}

input TableDoctorFilterInput {
  hospitalId: TableStringFilterInput
  id: TableIDFilterInput
  name: TableStringFilterInput
  specialty: TableStringFilterInput
}

input TableFloatFilterInput {
  between: [Float]
  contains: Float
  eq: Float
  ge: Float
  gt: Float
  le: Float
  lt: Float
  ne: Float
  notContains: Float
}

input TableHealthInfoFilterInput {
  age: TableIntFilterInput
  height: TableFloatFilterInput
  id: TableIDFilterInput
  sex: TableStringFilterInput
  system: TableStringFilterInput
  weight: TableFloatFilterInput
}

input TableHospitalFilterInput {
  coordinates: TableStringFilterInput
  id: TableIDFilterInput
  location: TableStringFilterInput
  name: TableStringFilterInput
}

input TableIDFilterInput {
  beginsWith: ID
  between: [ID]
  contains: ID
  eq: ID
  ge: ID
  gt: ID
  le: ID
  lt: ID
  ne: ID
  notContains: ID
}

input TableIntFilterInput {
  between: [Int]
  contains: Int
  eq: Int
  ge: Int
  gt: Int
  le: Int
  lt: Int
  ne: Int
  notContains: Int
}

input TablePatientUserFilterInput {
  email: TableStringFilterInput
  firstName: TableStringFilterInput
  id: TableIDFilterInput
  lastName: TableStringFilterInput
}

input TableStringFilterInput {
  beginsWith: String
  between: [String]
  contains: String
  eq: String
  ge: String
  gt: String
  le: String
  lt: String
  ne: String
  notContains: String
}

input TableUserFilterInput {
  id: TableIDFilterInput
  key: TableStringFilterInput
  type: TableStringFilterInput
}

input UpdateDoctorInput {
  hospitalId: String
  id: ID!
  name: String
  specialty: String
}

input UpdateHealthInfoInput {
  age: Int
  height: Float
  id: ID!
  sex: String
  system: String
  weight: Float
}

input UpdateHospitalInput {
  coordinates: String
  id: ID!
  location: String
  name: String
}

input UpdatePatientUserInput {
  email: String
  firstName: String
  id: ID!
  lastName: String
}
